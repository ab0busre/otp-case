#1. Подготовка проекта
#1.	Установите Node.js, React Native CLI и Android Studio или Xcode (для iOS).
#2.	Инициализируйте новый проект React Native:
bash
Copy code
npx react-native init DeliveryTrackingApp
cd DeliveryTrackingApp
#3.	Установите библиотеки:
bash
Copy code
npm install react-native-maps react-native-geolocation-service axios
 
#2. Пример кода для курьерского приложения
App.js
javascript
Copy code
import React, { useState, useEffect } from 'react';
import { View, StyleSheet, Text, PermissionsAndroid } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import Geolocation from 'react-native-geolocation-service';
import axios from 'axios';

export default function App() {
  const [location, setLocation] = useState(null);

 # // Получение разрешения на использование геолокации
  const requestLocationPermission = async () => {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        {
          title: 'Доступ к местоположению',
          message: 'Приложение требует доступ к вашему местоположению',
          buttonNeutral: 'Спросить позже',
          buttonNegative: 'Отмена',
          buttonPositive: 'OK',
        },
      );
      return granted === PermissionsAndroid.RESULTS.GRANTED;
    } catch (err) {
      console.warn(err);
      return false;
    }
  };

 # // Получение текущих координат
  useEffect(() => {
    const getLocation = async () => {
      const hasPermission = await requestLocationPermission();
      if (hasPermission) {
        Geolocation.watchPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            setLocation({ latitude, longitude });

         #   // Отправка координат на сервер
            axios.post('https://your-server.com/api/location', {
              latitude,
              longitude,
              courierId: '12345', // ID курьера
            });
          },
          (error) => {
            console.log(error.code, error.message);
          },
          { enableHighAccuracy: true, interval: 5000, distanceFilter: 10 },
        );
      }
    };

    getLocation();
  }, []);

  return (
    <View style={styles.container}>
      {location ? (
        <MapView
          style={styles.map}
          initialRegion={{
            latitude: location.latitude,
            longitude: location.longitude,
            latitudeDelta: 0.01,
            longitudeDelta: 0.01,
          }}
        >
          <Marker
            coordinate={{
              latitude: location.latitude,
              longitude: location.longitude,
            }}
            title="Вы находитесь здесь"
          />
        </MapView>
      ) : (
        <Text>Получение местоположения...</Text>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  map: { width: '100%', height: '100%' },
});
 
#3. Пример сервера (Node.js + Express)
#Сервер будет принимать координаты от курьеров и предоставлять их клиентам.
server.js
javascript
Copy code
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
app.use(cors());
app.use(bodyParser.json());

let courierLocations = {}; // Хранение координат курьеров

#// Эндпоинт для обновления местоположения
app.post('/api/location', (req, res) => {
  const { courierId, latitude, longitude } = req.body;
  courierLocations[courierId] = { latitude, longitude };
  res.status(200).json({ message: 'Координаты обновлены' });
});

#// Эндпоинт для получения местоположения курьера
app.get('/api/location/:courierId', (req, res) => {
  const { courierId } = req.params;
  if (courierLocations[courierId]) {
    res.status(200).json(courierLocations[courierId]);
  } else {
    res.status(404).json({ message: 'Курьер не найден' });
  }
});

#// Запуск сервера
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Сервер запущен на http://localhost:${PORT}`);
});
 
#4. Пример кода для клиентского приложения
#Клиент получает координаты курьера с сервера и отображает их на карте.
javascript
Copy code
import React, { useState, useEffect } from 'react';
import { View, StyleSheet, Text } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import axios from 'axios';

export default function ClientApp() {
  const [courierLocation, setCourierLocation] = useState(null);
  const courierId = '12345'; // ID курьера

  useEffect(() => {
    const fetchLocation = async () => {
      try {
        const response = await axios.get(
          `https://your-server.com/api/location/${courierId}`
        );
        setCourierLocation(response.data);
      } catch (error) {
        console.error('Ошибка получения данных:', error);
      }
    };

 #   // Обновление каждые 5 секунд
    const interval = setInterval(fetchLocation, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <View style={styles.container}>
      {courierLocation ? (
        <MapView
          style={styles.map}
          initialRegion={{
            latitude: courierLocation.latitude,
            longitude: courierLocation.longitude,
            latitudeDelta: 0.01,
            longitudeDelta: 0.01,
          }}
        >
          <Marker
            coordinate={{
              latitude: courierLocation.latitude,
              longitude: courierLocation.longitude,
            }}
            title="Курьер здесь"
          />
        </MapView>
      ) : (
        <Text>Загрузка местоположения курьера...</Text>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  map: { width: '100%', height: '100%' },
});
 
#Как это работает:
#1.	Курьер использует приложение, которое передаёт его координаты на сервер.
#2.	Клиент получает текущие координаты курьера с сервера и видит его на карте.
#3.	Yandex API используется для визуализации карт и местоположения.


